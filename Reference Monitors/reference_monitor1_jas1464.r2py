TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"


LIST = []
lockfile = createlock()
mycontext['isFirstCharM'] = 0


class SecureFile():
  def __init__(self,privilegedfo):
    self.privilegedfo = privilegedfo

  def readat(self,bytes,offset):
    LIST.append("readat")
    return self.privilegedfo.readat(bytes,offset)

  def writeat(self,data,offset):
    LIST.append("writeat")
    lockfile.acquire(bool(1))
	
    if data.startswith("MZ") and (offset == 0):
      lockfile.release()
      raise ValueError("Cannot start file with MZ!")
	  
    elif data.startswith("M") and (offset == 0):
      mycontext['isFirstCharM'] = mycontext['isFirstCharM'] + 1
      retval = self.privilegedfo.writeat(data,offset)
      lockfile.release()
      return retval
	  
    elif data.startswith("Z") and (offset == 1):
      if mycontext['isFirstCharM'] == 1:
        lockfile.release()
        raise ValueError("Cannot start file with MZ!")
      else:
        retval = self.privilegedfo.writeat(data,offset)
        lockfile.release()
        return retval
		
    else:
      LIST.append("writeat")
      retval = self.privilegedfo.writeat(data,offset)
      lockfile.release()
      return retval

  def close(self):
    LIST.append("close")
    return self.privilegedfo.close()


def secure_openfile(filename, create):
  LIST.append("openfile")
  privilegedfo = openfile(filename,create)
  return SecureFile(privilegedfo)



sec_file_def = {"obj-type":SecureFile,
    "name":"SecureFile",
    "readat":{TYPE:FUNC,ARGS:((int,long,type(None)),(int,long)),EXCP:Exception,RETURN:str,TARGET:SecureFile.readat},
    "writeat":{TYPE:FUNC,ARGS:(str,(int,long)),EXCP:Exception,RETURN:(None),TARGET:SecureFile.writeat},
    "close":{TYPE:FUNC,ARGS:None,EXCP:None,RETURN:(bool,type(None)),TARGET:SecureFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:secure_openfile}

secure_dispatch_module()